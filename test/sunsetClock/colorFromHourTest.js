import chai from "chai"
let expect = chai.expect

import sinon from 'sinon'
import sunsetClock from '../../components/sunsetClock/module'

describe('color from hour test', () => {

  it('should return a number generated by crescent channel graduation, relative to hour at morning.', () => {
    const crescentColorSchemeStub = sinon.stub(
      sunsetClock,
      "getCrescentColorChannelFromHour"
    );
    const decrescentColorSchemeStub = sinon.stub(
      sunsetClock,
      "getDecrescentColorChannelFromHour"
    );

    const channelFromTo = {
      from: 10,
      to: 200
    }
    const middayHour = 12
    const morningTest = {
      hour: 1,
      expected: '20'
    }

    crescentColorSchemeStub.withArgs(
      channelFromTo.from,
      channelFromTo.to,
      morningTest.hour,
      middayHour
    ).returns('20')

    decrescentColorSchemeStub.withArgs(
      channelFromTo.from,
      channelFromTo.to,
      morningTest.hour,
      middayHour
    ).returns('190')

    expect(sunsetClock.getColorChannelFromHour(
      channelFromTo.from,
      channelFromTo.to,
      morningTest.hour
    )).to.be.equal(morningTest.expected)
  })

  it('should return a number generated by descrescent channel graduation, relative to hour at afternoon.', () => {
    const channelFromTo = {
      from: 10,
      to: 200
    }
    const middayHour = 12
    const morningTest = {
      hour: 20,
      expected: '20'
    }

    const crescentColorSchemeStub = sinon.stub(
      sunsetClock,
      "getCrescentColorChannelFromHour"
    );
    const decrescentColorSchemeStub = sinon.stub(
      sunsetClock,
      "getDecrescentColorChannelFromHour"
    );

    crescentColorSchemeStub.reset();
    decrescentColorSchemeStub.reset();

    crescentColorSchemeStub.withArgs(
      channelFromTo.from,
      channelFromTo.to,
      morningTest.hour,
      middayHour
    ).returns('190')

    decrescentColorSchemeStub.withArgs(
      channelFromTo.from,
      channelFromTo.to,
      morningTest.hour,
      middayHour
    ).returns('20')

    expect(sunsetClock.getColorChannelFromHour(
      channelFromTo.from,
      channelFromTo.to,
      morningTest.hour
    )).to.be.equal(morningTest.expected)
  })
})


export default {}
